name: Community CICD

on:
  push:
    paths:
      - 'community/**'
    branches: [ "main","community" ]
  pull_request:
    paths:
        - 'community/**'
    branches: [ "main","community" ]


# 테스트 결과 작성을 위해 쓰기권한 추가
permissions: write-all
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    #CI
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant Execute Permission For Gradlew
      run: chmod +x gradlew
      working-directory: community

    - name: Build With Gradle
      run: ./gradlew build -x test
      working-directory: community
      
    # build Test
    - name: 테스트 코드 실행
      run: ./gradlew --info test
      working-directory: community

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: ${{ always() }}
      with:
        files: build/test-results/**/*.xml
        
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: success() || failure() # always run even if the previous step fails
      with:
        report_paths: '**/build/test-results/test/TEST-*.xml'

    # CD
    - name: Docker build & Push
      run: |
        docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:community ./community
        docker push ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:community

    - name: Deploy Images with Docker compose
      uses: appleboy/ssh-action@master
      env:
        APP: "santeut"
        COMPOSE: "/home/ec2-user/santeut/docker-compose.yml"
      with:
        username: ec2-user
        host: ${{ secrets.EC2_HOST }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        envs: APP, COMPOSE
        #script_stop: true
        script: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker-compose -f $COMPOSE stop community-service
          sudo docker pull ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:community
          sudo docker-compose build --no-cache
          sudo docker-compose -f $COMPOSE up -d community-service
